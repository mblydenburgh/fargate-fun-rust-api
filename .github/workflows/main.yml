name: Rust

on:
  push:
    branches:
      - main
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: latest
      run: |
        # Build a docker container and push it to ECR 
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Install Node
      uses: actions/setup-node@v1
      with:
        node-version: 18

    - name: Install Stack Dependencies
      working-directory: ./cdk
      run: 'sudo npm ci'
      
    - name: Install NPM
      run: 'sudo apt update -y && sudo apt install nodejs npm -y'

    - name: Install CDK CLI
      working-directory: ./cdk
      run: 'sudo npm install -g aws-cdk'
      
    - name: CDK Synth
      working-directory: ./cdk
      env:
        AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
      run: 'cdk synth'

    - name: Run CDK Bootstrap
      working-directory: ./cdk
      run: 'cdk bootstrap aws://${{ secrets.AWS_ACCOUNT }}/us-east-1'

    - name: CDK Deploy
      working-directory: ./cdk
      env:
        AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
      run: 'cdk deploy --require-approval never'
